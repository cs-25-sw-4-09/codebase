import ZERO "./dap-lib/digital-font/letters/0.dap";
import ONE "./dap-lib/digital-font/letters/1.dap";
import TWO "./dap-lib/digital-font/letters/2.dap";
import THREE "./dap-lib/digital-font/letters/3.dap";
import FOUR "./dap-lib/digital-font/letters/4.dap";
import FIVE "./dap-lib/digital-font/letters/5.dap";
import SIX "./dap-lib/digital-font/letters/6.dap";
import SEVEN "./dap-lib/digital-font/letters/7.dap";
import EIGHT "./dap-lib/digital-font/letters/8.dap";
import NINE "./dap-lib/digital-font/letters/9.dap";
import COMMA "./dap-lib/digital-font/letters/COMMA.dap";
import LEFTPAREN "./dap-lib/digital-font/letters/LEFTPAREN.dap";
import RIGHTPAREN "./dap-lib/digital-font/letters/RIGHTPAREN.dap";
import LEFTBRACKET "./dap-lib/digital-font/letters/LEFTBRACKET.dap";
import RIGHTBRACKET "./dap-lib/digital-font/letters/RIGHTBRACKET.dap";
import NEGATIVE "./dap-lib/digital-font/letters/NEGATIVE.dap";
import COLON "./dap-lib/digital-font/letters/COLON.dap";
import A "./dap-lib/digital-font/letters/A.dap";
import B "./dap-lib/digital-font/letters/B.dap";
import C "./dap-lib/digital-font/letters/C.dap";
import D "./dap-lib/digital-font/letters/D.dap";
import E "./dap-lib/digital-font/letters/E.dap";
import F "./dap-lib/digital-font/letters/F.dap";
import G "./dap-lib/digital-font/letters/G.dap";
import H "./dap-lib/digital-font/letters/H.dap";
import I "./dap-lib/digital-font/letters/I.dap";
import J "./dap-lib/digital-font/letters/J.dap";
import K "./dap-lib/digital-font/letters/K.dap";
import L "./dap-lib/digital-font/letters/L.dap";
import M "./dap-lib/digital-font/letters/M.dap";
import N "./dap-lib/digital-font/letters/N.dap";
import O "./dap-lib/digital-font/letters/O.dap";
import P "./dap-lib/digital-font/letters/P.dap";
import Q "./dap-lib/digital-font/letters/Q.dap";
import R "./dap-lib/digital-font/letters/R.dap";
import S "./dap-lib/digital-font/letters/S.dap";
import T "./dap-lib/digital-font/letters/T.dap";
import U "./dap-lib/digital-font/letters/U.dap";
import V "./dap-lib/digital-font/letters/V.dap";
import W "./dap-lib/digital-font/letters/W.dap";
import X "./dap-lib/digital-font/letters/X.dap";
import Y "./dap-lib/digital-font/letters/Y.dap";
import Z "./dap-lib/digital-font/letters/Z.dap";

import col "./dap-lib/digital-font/letters/rowmaker.dap";

string: int[] = [
  68, 82, 65, 87,    // D R A W
  32,               // space
  65, 83,           // A S
  32,               // space
  80, 82, 79, 71, 82, 65, 77, 77, 69, 82  // P R O G R A M M E R
];
/*string: int[] = [
  65, 67, 67, 69, 80, 84, 65, 78, 67, 69, 32, 84, 69, 83, 84
];*/


main_color: color = (0,0,100,255);
background_color: color = (0,0,0,0);
scale_size:int = 1;


// SRC: https://suncatcherstudio.com/lettering-fonts/cross-stitch-letters/
begin
drawLetter(code: int, main_color: color, background_color: color): shape -> {
  space_blocks: bool[] = [false];
  space: shape = place col(|blocks = space_blocks|) right (2,0) offset col(|blocks = space_blocks|);
  fork {
    (code == 0)  -> { return ZERO(|main_color = main_color, background_color = background_color|); }
    (code == 1)  -> { return ONE(|main_color = main_color, background_color = background_color|); }
    (code == 2)  -> { return TWO(|main_color = main_color, background_color = background_color|); }
    (code == 3)  -> { return THREE(|main_color = main_color, background_color = background_color|); }
    (code == 4)  -> { return FOUR(|main_color = main_color, background_color = background_color|); }
    (code == 5)  -> { return FIVE(|main_color = main_color, background_color = background_color|); }
    (code == 6)  -> { return SIX(|main_color = main_color, background_color = background_color|); }
    (code == 7)  -> { return SEVEN(|main_color = main_color, background_color = background_color|); }
    (code == 8)  -> { return EIGHT(|main_color = main_color, background_color = background_color|); }
    (code == 9)  -> { return NINE(|main_color = main_color, background_color = background_color|); }
    (code == 40) -> { return LEFTPAREN(|main_color = main_color, background_color = background_color|); }
    (code == 41) -> { return RIGHTPAREN(|main_color = main_color, background_color = background_color|); }
    (code == 44) -> { return COMMA(|main_color = main_color, background_color = background_color|); }
    (code == 45) -> { return NEGATIVE(|main_color = main_color, background_color = background_color|); }
    (code == 58) -> { return COLON(|main_color = main_color, background_color = background_color|); }
    (code == 91) -> { return LEFTBRACKET(|main_color = main_color, background_color = background_color|); }
    (code == 93) -> { return RIGHTBRACKET(|main_color = main_color, background_color = background_color|); }
    (code == 65) -> { return A(|main_color = main_color, background_color = background_color|); }
    (code == 66) -> { return B(|main_color = main_color, background_color = background_color|); }
    (code == 67) -> { return C(|main_color = main_color, background_color = background_color|); }
    (code == 68) -> { return D(|main_color = main_color, background_color = background_color|); }
    (code == 69) -> { return E(|main_color = main_color, background_color = background_color|); }
    (code == 70) -> { return F(|main_color = main_color, background_color = background_color|); }
    (code == 71) -> { return G(|main_color = main_color, background_color = background_color|); }
    (code == 72) -> { return H(|main_color = main_color, background_color = background_color|); }
    (code == 73) -> { return I(|main_color = main_color, background_color = background_color|); }
    (code == 74) -> { return J(|main_color = main_color, background_color = background_color|); }
    (code == 75) -> { return K(|main_color = main_color, background_color = background_color|); }
    (code == 76) -> { return L(|main_color = main_color, background_color = background_color|); }
    (code == 77) -> { return M(|main_color = main_color, background_color = background_color|); }
    (code == 78) -> { return N(|main_color = main_color, background_color = background_color|); }
    (code == 79) -> { return O(|main_color = main_color, background_color = background_color|); }
    (code == 80) -> { return P(|main_color = main_color, background_color = background_color|); }
    (code == 81) -> { return Q(|main_color = main_color, background_color = background_color|); }
    (code == 82) -> { return R(|main_color = main_color, background_color = background_color|); }
    (code == 83) -> { return S(|main_color = main_color, background_color = background_color|); }
    (code == 84) -> { return T(|main_color = main_color, background_color = background_color|); }
    (code == 85) -> { return U(|main_color = main_color, background_color = background_color|); }
    (code == 86) -> { return V(|main_color = main_color, background_color = background_color|); }
    (code == 87) -> { return W(|main_color = main_color, background_color = background_color|); }
    (code == 88) -> { return X(|main_color = main_color, background_color = background_color|); }
    (code == 89) -> { return Y(|main_color = main_color, background_color = background_color|); }
    (code == 90) -> { return Z(|main_color = main_color, background_color = background_color|); }
    (otherwise) -> { return space; }
  }
}




// Start string with first letter
letter_string: shape = drawLetter(string[0], main_color, background_color);

// Add the rest
for cur in 1 to string.size {
  letter_string = place drawLetter(string[cur], main_color, background_color) right (1,0) offset letter_string;
}

draw scale letter_string by scale_size;
