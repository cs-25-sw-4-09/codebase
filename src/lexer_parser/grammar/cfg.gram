grammar cfg
{

  options
  {
    Axiom = "program"; // the top variable for this grammar
    Separator = "SEPARATOR"; // the terminal that represent white space
  }
  terminals
  {
    WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | U+000A
                  | U+000D | U+0085 | U+2028 | U+2029 | U+0009;

    COMMENT_MULTI -> '/*' ( .* - (.* '*/' .*) ) '*/';
    COMMENT_SINGLE -> '//' [^\r\n]* ;
    SEPARATOR   -> WHITE_SPACE+ | COMMENT_MULTI | COMMENT_SINGLE;

    CONST       -> [0-9];
    INTEGER -> [1-9] CONST* | '0';

    FLOAT       -> INTEGER? '.' CONST+;
    LETTER      -> [A-Za-z];


    IDENTIFIER -> (LETTER | '_') (LETTER | CONST | '_')*;
    STRING -> '"'(LETTER | '\\' | '/' | CONST | '.')*'"';
    BOOLEAN -> 'true' | 'false';

  }

  rules
  {
    //Start place
    program -> declS 'begin'! stmtS;

    //Declarations
    declS -> (import | decl)*;
    import -> 'import'! id STRING ';'!;
    decl -> id ':'! types ('='! exprS)?';'!;

    //Statements
    stmtS -> (forkS | for | draw | return | funcDecl | assign | varDecl)+;

    forkS -> 'fork'! '{'! fork^ '}'!;
    for -> 'for'! id 'in'! exprS 'to'! exprS '{'! stmtS '}'! ;
    draw -> 'draw'! exprS ('at'! exprS)? ';'!;
    return -> 'return'! exprS ';'!;
    funcDecl -> id '('! params? ')'! ':'! types '->'! '{'! stmtS '}'!;
    assign -> id '='! exprS ';'!;
    varDecl -> id ':'! types '='! exprS ';'!;

    fork -> forkExpr+ otherwise?;
    forkExpr -> '('! exprFunc ')'! '->'! '{'! stmtS '}'!;
    otherwise -> '('! 'otherwise'! ')'! '->'! '{'! stmtS '}'!;

    //Expressions
    exprS -> (manipulation | exprFunc | SCall | color | path | range | polygon)^;
    exprFunc -> (expr )^;
    expr -> expr '||'^ expr1 | expr1^;
    expr1 -> expr1 '&&'^ expr2 | expr2^;
    expr2 -> expr3 ('==' | '<' | '>' | '>=' | '<=' | '!=')^ expr3 | expr3^;
    expr3 -> expr3 '+'^ expr4 | expr3 '-'^ expr4 | expr4^;
    expr4 -> expr4 '%'^ expr5 | expr4 '*'^ expr5 | expr4 '/'^ expr5 | expr5^;
    expr5 -> '-'^expr6 | '!'^expr6 | expr6^;
    expr6 -> (point | FCall | FLOAT | INTEGER | id | member | array | BOOLEAN | arrayIdx)^;

    //Also contains parenthesis, but this case is promoted
    point -> '('! (expr^ | (expr) ','! (expr)) ')'!;
    FCall -> id '('! args ')'!;

    member -> id '.'! id;
    range -> exprFunc ('..' | '..=') exprFunc;
    color -> '('! (expr) ','! (expr) ','! (expr) ','! (expr)')'! ;
    path   -> exprFunc (('--' | '~~')^ exprFunc)+;
    polygon -> exprS(('--*' | '~~*')^);

    args -> arg (','! arg)*;
    arg -> exprS^;

    SCall -> (path | id | polygon) '(|'! attrS '|)'!;
    attrS -> (attr (','! attr)*)? ;
    attr -> id '='! exprS;

    arrayIdx -> id ('['! exprS ']'!)+;
    array -> ('['! ((exprS (','! exprS)*))? ']'! | '[]'!);

    pos -> ('left' | 'right' | 'top' | 'bottom' | 'ontop') expr ('by'! point)?;
    manipulation -> place | scale | rotate;
    place -> 'place'! exprFunc pos;
    scale -> 'scale'! exprFunc 'by'! exprFunc;
    rotate -> 'rotate'! exprFunc 'by'! exprFunc;

    params -> param (','! param)*;
    param -> id ':'! types;

    //Types
    types -> ('int' | 'float' | 'point' | 'color'
    | 'shape' | 'path' | 'polygon' | 'bool' | 'int[]' | 'float[]' | 'point[]' | 'color[]'
    | 'shape[]' | 'path[]' | 'polygon[]' | 'bool[]')^;


    //Simple things
    id -> IDENTIFIER^;
  }
}
