grammar cfg
{

  options
  {
    Axiom = "Program"; // the top variable for this grammar
    Separator = "SEPARATOR"; // the terminal that represent white space
  }
  terminals
  {
    // Src for comments: https://cenotelie.fr/projects/hime/referenceLangOptions
    WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | U+000A
                  | U+000D | U+0085 | U+2028 | U+2029 | U+0009;

    COMMENT_MULTI -> '/*' ( .* - (.* '*/' .*) ) '*/';
    COMMENT_SINGLE -> '//' [^\r\n]* ;
    SEPARATOR   -> WHITE_SPACE+ | COMMENT_MULTI | COMMENT_SINGLE;

    NUM       -> [0-9];
    INTEGER -> [1-9] NUM* | '0';

    FLOAT       -> INTEGER? '.' NUM+;
    LETTER      -> [A-Za-z];


    IDENTIFIER -> (LETTER | '_') (LETTER | NUM | '_')*;
    STRING -> '"'(LETTER | '\\' | '/' | NUM | '.')+'"';
    BOOLEAN -> 'true' | 'false';

  }

  rules
  {
    //Start place
    Program -> DeclS 'begin'! StmtS;

    //Declarations
    DeclS -> (Import | Decl)*;
    Import -> 'import'! IDENTIFIER STRING ';'!;
    Decl -> IDENTIFIER ':'! Types ('='! ExprT)?';'!;

    //Statements
    StmtS -> (ForkS | For | Draw | Return | FuncDecl | Assign | ArrayAssign | VarDecl)+;

    ForkS -> 'fork'! '{'! Fork^ '}'!;
        Fork -> ForkCase+ Otherwise?;
        ForkCase -> '('! ExprV ')'! '->'! '{'! StmtS '}'!;
        Otherwise -> '('! 'otherwise'! ')'! '->'! '{'! StmtS '}'!;
    For -> 'for'! IDENTIFIER 'in'! ExprV 'to'! ExprV '{'! StmtS '}'! ;
    Draw -> 'draw'! ExprT ('at'! ExprT)? ';'!;
    Return -> 'return'! ExprT ';'!;
    FuncDecl -> IDENTIFIER '('! Params? ')'! ':'! Types '->'! '{'! StmtS '}'!;
        Params -> Param (','! Param)*;
        Param -> IDENTIFIER ':'! Types;
    Assign -> IDENTIFIER '='! ExprT ';'!;
    VarDecl -> IDENTIFIER ':'! Types '='! ExprT ';'!;
    ArrayAssign -> IDENTIFIER '['! ExprV ']'! '='!  ExprV ';'!;    



    //Expressions
    ExprT -> (Array| ExprV | Path | Polygon | ExprS)^ ;
      Array -> '['! (ExprT (','! ExprT)*)? ']'! ;

    Point -> '('! ExprV ','! ExprV ')'! ;
    Color -> '('! ExprV ','! ExprV ','! ExprV ','! ExprV ')'!;
    Path   -> ExprV (('--' | '~~')^ ExprV)+ ;
    Polygon -> Path(('--*' | '~~*')^) ;

    ExprS -> (Manipulation | SCall)^ ;
    Manipulation -> Place | Scale | Rotate;
    Scale -> 'scale'! ExprT 'by'! ExprV;
    Rotate -> 'rotate'! ExprT 'by'! ExprV;
    Place -> 'place'! ExprT Pos (ExprV 'offset'!)? ExprT ;
        Pos -> ('left' | 'right' | 'top' | 'bottom' | 'ontop' | 'center')^;
    SCall -> (IDENTIFIER | Path | Polygon) '(|'! AttrS '|)'!;
        AttrS -> (Attr (','! Attr)*)? ;
        Attr -> IDENTIFIER '='! ExprT;

    ExprV -> ExprV '||'^ ExprV1 | ExprV1^;
    ExprV1 -> ExprV1 '&&'^ ExprV2 | ExprV2^;
    ExprV2 -> ExprV3 ('==' | '<' | '>' | '>=' | '<=' | '!=')^ ExprV3 | ExprV3^;
    ExprV3 -> ExprV3 '+'^ ExprV4 | ExprV3 '-'^ ExprV4 | ExprV4^;
    ExprV4 -> ExprV4 '%'^ ExprV5 | ExprV4 '*'^ ExprV5 | ExprV4 '/'^ ExprV5 | ExprV5^;
    ExprV5 -> '-'^ExprV6 | '!'^ExprV6 | ExprV6^;
    ExprV6 -> '('! ExprV^ ')'! | ExprV7^;
    ExprV7 -> ( FCall | FLOAT | INTEGER | Member | BOOLEAN | ArrayIdx | IDENTIFIER | Color | Point )^;

    FCall -> IDENTIFIER '('! Args? ')'!;
    Args -> ExprT (','! ExprT)*;

    ArrayIdx -> (IDENTIFIER | Array) '['! ExprV ']'!;
    Member -> IDENTIFIER '.'! IDENTIFIER;

    //Types
    Types -> ('int' | 'float' | 'point' | 'color'
    | 'shape' | 'path' | 'polygon' | 'bool' | 'int[]' | 'float[]' | 'point[]' | 'color[]'
    | 'shape[]' | 'path[]' | 'polygon[]' | 'bool[]')^;
  }
}
