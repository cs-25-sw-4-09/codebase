grammar context_free_grammar
{

  options
  {
    Axiom = "start"; // the top variable for this grammar
    Separator = "SEPARATOR"; // the terminal that represent white space
  }
  terminals
  {
    WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | U+000A 
                  | U+000D | U+0085 | U+2028 | U+2029 | U+0009;
                  
    COMMENT_MULTI -> '/*' ( .* - (.* '*/' .*) ) '*/';
    COMMENT_SINGLE -> '//' [^\r\n]* ;
    SEPARATOR   -> WHITE_SPACE+ | COMMENT_MULTI | COMMENT_SINGLE;

    CONST       -> [0-9];
    INTEGER -> [1-9] CONST* | '0';
    
    FLOAT       -> INTEGER? '.' CONST+;
    LETTER      -> [A-Za-z];
    
    IDENTIFIER -> (LETTER | '_') (LETTER | CONST | '_')*;
    STRING -> '"'(LETTER | '\\' | '/' | CONST | '.')*'"';

  }
  
  rules
  {
    //Start place
    start -> program; 
    program -> decl 'begin' stmtS; 
   
    //Declarations
    decl -> (import | var_decl)*;
    import -> 'import' id STRING ';';
    var_decl -> id ':' types ';';

    //Statements
    stmtS -> stmt+;
    stmt -> (forkS ';' | 'for' id 'in' exprS '{' stmt '}' 
    | 'draw' exprS ('at' exprS)? ';' | id (':' types)? '=' exprS ';' 
    | 'return' exprS ';' | id '(' params? ')' ':' types '->' '{' stmt '}');

    forkS -> 'fork' '(' fork ')';
    fork -> '(' expr_func ')' '->' '{' stmt '}' fork? 
    | '(' 'otherwise' ')' '->' '{' stmt '}';
    
    //Expressions 

    exprS -> (manipulation | expr_func | SCall | arr_args 
    |  color | path | range | add | remove)^;
    expr_func -> (expr | FCall )^;
    expr -> expr '||'^ expr1 | expr1^;
    expr1 -> expr1 '&&'^ expr2 | expr2^;
    expr2 -> expr3 ('==' | '<' | '>' | '>=' | '<=')^ expr3 | expr3^;
    expr3 -> expr3 '+'^ expr4 | expr3 '-'^ expr4 | expr4^;
    expr4 -> expr4 '%'^ expr5 | expr4 '*'^ expr5 | expr4 '/'^ expr5 | expr5^; 
    expr5 -> '-'^expr6 | '!'^expr6 | expr6^;
    expr6 -> (parenthesis | FLOAT | INTEGER | id | properties | index)^;
    
    add -> 'add('id ',' expr_func')';
    remove -> 'remove('id ',' expr_func')'; 
    
    parenthesis -> '(' (expr | (expr | FCall) ',' (expr | FCall)) ')';

    properties -> id '.' id; 
    range -> expr_func '..' expr_func;
    color -> '(' (expr | FCall) ',' (expr | FCall) ',' (expr | FCall) ',' (expr | FCall)')' ;
    path   -> expr_func (('--' | '~~') expr_func)+ (('--' | '~~')'*')?;
    FCall -> id '(' args ')';
    args -> exprS | exprS ',' args;
    SCall -> (path | id) '(|' attr '|)';
    attr -> id '=' exprS (',' attr^)?;
    index -> id ('[' expr_func ']')+;
    pos -> ('left' | 'right' | 'top' | 'bottom' | 'on') expr (id | parenthesis | FCall)?;
    manipulation -> 'place' expr_func pos | 'scale' expr_func 'by' expr_func 
    | 'rotate' expr_func 'by' expr_func;
    arr_args -> '[' args ']';
    params -> id ':' types (',' params)?;

    //Types
    types -> ('int' | 'float' | types'[]' | 'point' | 'color' 
    | 'shape' | 'path' | 'polygon')^;
    
    //Simple things
    id -> IDENTIFIER^; 
  }
}