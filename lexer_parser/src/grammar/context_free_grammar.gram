grammar context_free_grammar
{
  //todo: Tilføj comments

  options
  {
    Axiom = "start"; // the top variable for this grammar
    Separator = "SEPARATOR"; // the terminal that represent white space
  }
  terminals
  {
    WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | U+000A 
                  | U+000D | U+0085 | U+2028 | U+2029 | U+0009;
    SEPARATOR   -> WHITE_SPACE+;

    CONST       -> [0-9];
    INTEGER -> [1-9] CONST* | '0';
    
    FLOAT       -> INTEGER? '.' CONST+;
    //CHAR      -> [U+0000-U+FFFF];
    LETTER      -> [A-Z] | [a-z];
    //todo: Tilføj alle valid tegn her i identifiers
    IDENTIFIER -> (LETTER | '_') (LETTER | CONST | '_')*;
    STRING -> '"'(LETTER | '\\' | '/' | CONST | '.')*'"';
    //MEMBER -> 'r' | 'g' | 'b' | 'a' | 'height' | 'width' | 'size' | 'x' | 'y' ;
    //todo: find ud af om member først håndteres i typechek

  }
  rules
  {

    //Start place
    start -> program; 
    program -> decl 'begin' stmt; 
   
    //Declarations
    decl -> (import | desireable)*;
    import -> 'import' id STRING ';';
    desireable -> id ':' types ';';

    //Statements
    stmt -> (forkS ';' | 'for' id 'in' exprS '{' stmt '}' 
    | 'draw' exprS ('at' point)? ';' | id (':' types)? '=' exprS ';' 
    | 'return' exprS ';' | id '(' params ')' ':' types '->' '{' stmt '}') stmt?;
    //todo: spørg om funktioner kan kaldes uden nogle parametre. 

    forkS -> 'fork' '(' fork ')';
    fork -> '(' expr ')' '->' '{' stmt '}' fork? 
    | '(' 'otherwise' ')' '->' '{' stmt '}';
    
    //Expressions
    //exprS -> expr | manipulation; 
    exprS -> manipulation | expr | FCall | SCall | arr_args |  color | path | range;
    expr -> expr '||' expr1 | expr1;
    expr1 -> expr1 '&&' expr2 | expr2;
    expr2 -> expr3 '==' expr3 | expr3 '<' expr3 | expr3;
    expr3 -> expr3 '+' expr4 | expr3 '-' expr4 | expr4;
    expr4 -> expr4 '%' expr5 | expr4 '*' expr5 | expr4 '/' expr5 | expr5; 
    expr5 -> '-'expr6 | '!'expr6 | expr6;
    expr6 -> '(' expr ')' | FLOAT | INTEGER | id | properties | index ;
    
    properties -> id '.' id; 
    range -> expr '..' expr;
    point  -> '('expr ',' expr')';
    color -> '('expr',' expr ',' expr ',' expr')' ;
    //todo: Tilføj identifier v
    path   -> point ('--' | '~~') path | point | '*';
    FCall -> id '(' args ')';
    args -> exprS | exprS ',' args;
    SCall -> (path | id) '(|' attr '|)';
    attr -> id '=' exprS (',' attr)?;
    index -> id '[' expr ']' | index '[' expr ']';
    pos -> ('left' | 'right' | 'top' | 'bottom' | 'on') expr point?;
    manipulation -> 'place' expr pos | 'scale' expr 'by' expr 
    | 'rotate' expr 'by' expr;
    arr_args -> '[' args ']';
    params -> id ':' types (',' params)?;

    //Types
    types -> 'int' | 'float' | types'[]' | 'point' | 'color' 
    | 'shape' | 'path' | 'polygon';
    
    //Simple things
    id -> IDENTIFIER;    
  }
}